import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class PlaylistService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  /// L·∫•y ID ng∆∞·ªùi d√πng hi·ªán t·∫°i
  String? get userId => _auth.currentUser?.uid;

  /// T·∫°o playlist m·ªõi
  Future<String?> createPlaylist(String playlistName) async {
    if (userId == null) return null;

    try {
      final playlistRef = await _firestore.collection("users").doc(userId).collection("playlists").add({
        "name": playlistName,
        "createdAt": Timestamp.now(),
      });

      return playlistRef.id; // Tr·∫£ v·ªÅ ID c·ªßa playlist m·ªõi t·∫°o
    } catch (e) {
      print("L·ªói khi t·∫°o playlist: $e");
      return null;
    }
  }

  /// Th√™m b√†i h√°t v√†o playlist
  Future<void> addSongToPlaylist(
      String playlistId, String songId, String songName, String artistName, String imageUrl) async {
    if (userId == null) return;

    try {
      await _firestore
          .collection("users")
          .doc(userId)
          .collection("playlists")
          .doc(playlistId)
          .collection("songs")
          .doc(songId)
          .set({
        "songId": songId,
        "songName": songName,
        "artistName": artistName,
        "imageUrl": imageUrl,
        "addedAt": Timestamp.now(),
      });

      print("ƒê√£ th√™m b√†i h√°t v√†o playlist!");
    } catch (e) {
      print("L·ªói khi th√™m b√†i h√°t v√†o playlist: $e");
    }
  }

  /// X√≥a b√†i h√°t kh·ªèi playlist
  Future<void> removeSongFromPlaylist(String playlistId, String songId) async {
    if (userId == null) return;

    try {
      await _firestore
          .collection("users")
          .doc(userId)
          .collection("playlists")
          .doc(playlistId)
          .collection("songs")
          .doc(songId)
          .delete();

      print("ƒê√£ x√≥a b√†i h√°t kh·ªèi playlist!");
    } catch (e) {
      print("L·ªói khi x√≥a b√†i h√°t kh·ªèi playlist: $e");
    }
  }

  /// üîÑ L·∫•y danh s√°ch playlist
  Stream<List<Map<String, dynamic>>> getPlaylists() {
    if (userId == null) return const Stream.empty();

    return _firestore.collection("users").doc(userId).collection("playlists").snapshots().map((snapshot) {
      return snapshot.docs.map((doc) {
        return {
          "playlistId": doc.id,
          "name": doc["name"],
        };
      }).toList();
    });
  }

  /// üéµ L·∫•y danh s√°ch b√†i h√°t trong playlist
  Stream<List<Map<String, dynamic>>> getSongsInPlaylist(String playlistId) {
    if (userId == null) return const Stream.empty();

    return _firestore
        .collection("users")
        .doc(userId)
        .collection("playlists")
        .doc(playlistId)
        .collection("songs")
        .snapshots()
        .map((snapshot) {
      return snapshot.docs.map((doc) {
        return {
          "songId": doc.id,
          "songName": doc["songName"],
          "artistName": doc["artistName"],
          "imageUrl": doc["imageUrl"],
        };
      }).toList();
    });
  }

  /// X√≥a playlist
  Future<void> deletePlaylist(String playlistId) async {
    if (userId == null) return;

    try {
      await _firestore.collection("users").doc(userId).collection("playlists").doc(playlistId).delete();
      print("ƒê√£ x√≥a playlist!");
    } catch (e) {
      print("L·ªói khi x√≥a playlist: $e");
    }
  }

  /// Ki·ªÉm tra b√†i h√°t c√≥ trong playlist ch∆∞a
  Future<bool> isSongInPlaylist(String playlistId, String songId) async {
    if (userId == null) return false;

    final songRef = _firestore
        .collection("users")
        .doc(userId)
        .collection("playlists")
        .doc(playlistId)
        .collection("songs")
        .doc(songId);

    final songDoc = await songRef.get();
    return songDoc.exists; // Tr·∫£ v·ªÅ true n·∫øu b√†i h√°t ƒë√£ t·ªìn t·∫°i
  }
}
